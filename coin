import os
import time
import requests
import json
import math
from datetime import datetime, timedelta
import pytz # 用於處理時區
import re # 用於正規表達式
import asyncio # 用於非同步操作

# --- 配置區塊 ---
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '6005276002:AAGN9u1k7xEmfwpe6nkJqhOPjsEwGttJGzM')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', '-4946614597')

# 幣安 API 端點 (通常不需要修改)
BINANCE_FUTURES_EXCHANGE_INFO_URL = "https://fapi.binance.com/fapi/v1/exchangeInfo"
BINANCE_FUTURES_OPEN_INTEREST_URL = "https://fapi.binance.com/fapi/v1/openInterest"
BINANCE_SPOT_MINITICKER_URL = "https://api.binance.com/api/v3/ticker/24hr" 

# 價格變動評級閾值 (不變)
PRICE_TIERS = [
    {"threshold": 5.0, "rating": "⭐⭐⭐⭐"},
    {"threshold": 4.0, "rating": "⭐⭐⭐"},
    {"threshold": 3.0, "rating": "⭐⭐"},
    {"threshold": 2.0, "rating": "⭐"}
]

# 持倉量變動評級閾值 (不變)
OI_TIERS = [
    {"threshold": 5.0, "rating": "🔥🔥🔥🔥"},
    {"threshold": 3.5, "rating": "🔥🔥🔥"},
    {"threshold": 3.0, "rating": "🔥🔥"},
    {"threshold": 2.5, "rating": "🔥"}
]

# 警報冷卻時間 (分鐘)
ALERT_COOLDOWN_MINUTES = 5

# 數據儲存 (結構不變)
history_data = {}
monitored_symbols = [] 

# IP 封鎖狀態追蹤
is_ip_banned = False
ban_until = None 

# --- 輔助函數 ---

def calculate_percentage_change(data_array, minutes):
    """
    計算數據陣列在指定分鐘內的百分比變動。
    """
    if not data_array or len(data_array) < 2:
        return None

    now = datetime.now(pytz.utc)
    cutoff_time = now - timedelta(minutes=minutes)

    old_val = None
    for item in reversed(data_array):
        if item['timestamp'] <= cutoff_time:
            old_val = item['value']
            break
    
    if old_val is None: # 如果找不到足夠舊的數據點
        return None

    new_val = data_array[-1]['value']

    if new_val is None or old_val == 0:
        return None

    return ((new_val - old_val) / old_val) * 100

def get_rating_info(value, tiers):
    """
    根據值和定義的評級層級獲取評級符號。
    """
    abs_value = abs(value)
    for tier in tiers:
        if abs_value >= tier["threshold"]:
            return tier["rating"]
    return ""

def format_large_number(num):
    """
    將大數字格式化為帶有 K/M/B 單位和兩位小數的字串。
    """
    if num is None or math.isnan(num):
        return 'N/A'
    if num >= 1_000_000_000:
        return f"{(num / 1_000_000_000):.2f}B"
    elif num >= 1_000_000:
        return f"{(num / 1_000_000):.2f}M" # 已修正：這裡不再有多餘的'f'
    elif num >= 1_000:
        return f"{(num / 1_000):.2f}K"
    else:
        return f"{num:.2f}"

def format_pct_or_na(value):
    """
    將數字格式化為帶有兩位小數的百分比字串，如果為 None 或 NaN 則返回 'N/A'。
    """
    if value is None or math.isnan(value):
        return 'N/A'
    return f"{value:.2f}%"

# 簡化 Telegram 訊息發送的 print
async def send_telegram_alert(message):
    """
    透過 Telegram Bot 發送訊息。
    """
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        print("ERROR: Telegram BOT_TOKEN 或 CHAT_ID 未配置。無法發送訊息。")
        return

    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': message,
        'parse_mode': 'HTML' 
    }
    try:
        response = requests.post(url, json=payload, timeout=10)
        response.raise_for_status() 
        # print(f"DEBUG: Telegram 訊息發送成功: {message.splitlines()[0]}") # 減少重複日誌
    except requests.exceptions.HTTPError as e:
        print(f"ERROR: 發送 Telegram 訊息失敗: HTTP 錯誤 {e.response.status_code} - {e.response.text}")
    except requests.exceptions.RequestException as e:
        print(f"ERROR: 發送 Telegram 訊息失敗: 網路錯誤 - {e}")
    except Exception as e:
        print(f"CRITICAL: 發送 Telegram 訊息時發生未知錯誤: {e}")


def retry_fetch(url, retries=3, delay=1):
    """
    帶有重試邏輯的 fetch 請求，並處理幣安的 IP 封鎖。
    """
    global is_ip_banned, ban_until 
    for i in range(retries):
        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status() 
            is_ip_banned = False 
            ban_until = None
            return response.json()
        except requests.exceptions.HTTPError as e:
            error_text = e.response.text
            print(f"WARNING: 第 {i + 1} 次獲取失敗: {url}, Status: {e.response.status_code}")

            if e.response.status_code in [418, 429] or ("-1003" in error_text and "banned" in error_text):
                is_ip_banned = True
                ban_match = re.search(r"banned until (\d+)", error_text)
                if ban_match:
                    ban_timestamp_ms = int(ban_match.group(1))
                    ban_until = datetime.fromtimestamp(ban_timestamp_ms / 1000, tz=pytz.utc)
                    print(f"CRITICAL: IP 已被幣安封鎖，直到: {ban_until.strftime('%Y-%m-%d %H:%M:%S %Z')}")
                else:
                    ban_until = datetime.now(pytz.utc) + timedelta(minutes=5)
                    print("CRITICAL: IP 已被幣安封鎖 (未提供具體時間)，假定封鎖 5 分鐘。")

                raise Exception(f"IP BANNED: {error_text}")
            else:
                if i < retries - 1:
                    wait_time = delay * (2 ** i)
                    print(f"INFO: 將在 {wait_time} 秒後重試...")
                    time.sleep(wait_time)
                else:
                    raise e 
        except requests.exceptions.RequestException as e:
            print(f"ERROR: 第 {i + 1} 次獲取網路錯誤: {url}: {e}")
            if i < retries - 1:
                wait_time = delay * (2 ** i)
                print(f"INFO: 將在 {wait_time} 秒後重試...")
                time.sleep(wait_time)
            else:
                raise e

    raise Exception(f"CRITICAL: 在 {retries} 次重試後，仍無法獲取 {url}。")

# --- 數據獲取和處理 ---

def initialize_monitoring_symbols():
    """
    動態獲取並設定要監控的交易對列表。
    """
    global monitored_symbols, history_data, is_ip_banned, ban_until

    print("INFO: 正在獲取可監控的期貨交易對列表...")
    if is_ip_banned and ban_until and datetime.now(pytz.utc) < ban_until:
        remaining_time = (ban_until - datetime.now(pytz.utc)).total_seconds()
        print(f"WARNING: IP 仍然被封鎖，剩餘 {remaining_time:.0f} 秒。跳過交易對初始化。")
        return False

    is_ip_banned = False

    try:
        response_data = retry_fetch(BINANCE_FUTURES_EXCHANGE_INFO_URL)
        valid_symbols = [
            s['symbol'].replace('USDT', '/USDT')
            for s in response_data['symbols']
            if s['quoteAsset'] == 'USDT' and s['contractType'] == 'PERPETUAL' and s['status'] == 'TRADING'
        ]

        monitored_symbols = valid_symbols

        new_history_data = {}
        for symbol in monitored_symbols:
            if symbol in history_data:
                new_history_data[symbol] = history_data[symbol]
            else:
                new_history_data[symbol] = {
                    'spot': [],
                    'futures': [],
                    'last_alert_time': None,
                    'first_alert_time': None,
                    'subsequent_alert_times': []
                }
        history_data = new_history_data

        print(f"INFO: 已載入 {len(monitored_symbols)} 個期貨交易對。")
        if not monitored_symbols:
            print("WARNING: 沒有找到可監控的交易對。")
            return False
        return True

    except Exception as e:
        print(f"ERROR: 獲取期貨交易對列表失敗: {e}")
        return False

def fetch_spot_prices():
    """
    獲取所有監控交易對的當前現貨價格。
    """
    global history_data
    if is_ip_banned and ban_until and datetime.now(pytz.utc) < ban_until:
        return

    try:
        all_tickers = retry_fetch(BINANCE_SPOT_MINITICKER_URL)
        now = datetime.now(pytz.utc)

        for ticker in all_tickers:
            symbol_raw = ticker['symbol']
            formatted_symbol = symbol_raw.replace('USDT', '/USDT')
            price = float(ticker['lastPrice'])

            if formatted_symbol in monitored_symbols:
                if formatted_symbol not in history_data:
                    history_data[formatted_symbol] = {'spot': [], 'futures': [], 'last_alert_time': None, 'first_alert_time': None, 'subsequent_alert_times': []}
                history_data[formatted_symbol]['spot'].append({'timestamp': now, 'value': price})

                cutoff = now - timedelta(minutes=16)
                while history_data[formatted_symbol]['spot'] and history_data[formatted_symbol]['spot'][0]['timestamp'] < cutoff:
                    history_data[formatted_symbol]['spot'].pop(0)

    except Exception as e:
        print(f"ERROR: 獲取現貨價格失敗: {e}")


def fetch_open_interest_rest():
    """
    獲取每個監控交易對的期貨持倉量數據。
    """
    global history_data
    if is_ip_banned and ban_until and datetime.now(pytz.utc) < ban_until:
        return

    delay_between_requests = 0.5 

    for symbol in list(monitored_symbols):
        binance_symbol = symbol.replace('/', '')
        url = f"{BINANCE_FUTURES_OPEN_INTEREST_URL}?symbol={binance_symbol}"
        try:
            data = retry_fetch(url)
            open_interest = float(data['openInterest'])
            now = datetime.now(pytz.utc)

            if symbol not in history_data:
                history_data[symbol] = {'spot': [], 'futures': [], 'last_alert_time': None, 'first_alert_time': None, 'subsequent_alert_times': []}
            history_data[symbol]['futures'].append({'timestamp': now, 'value': open_interest})

            cutoff = now - timedelta(minutes=16)
            while history_data[symbol]['futures'] and history_data[symbol]['futures'][0]['timestamp'] < cutoff:
                history_data[symbol]['futures'].pop(0)

        except Exception as e:
            print(f"ERROR: 獲取 {symbol} 持倉量失敗: {e}")
            if "IP BANNED" in str(e):
                return
            if "-4108" in str(e) and "Symbol is on delivering" in str(e):
                print(f"WARNING: 交易對 {symbol} 狀態無效，將從監控列表中移除。")
                monitored_symbols.remove(symbol)
                if symbol in history_data:
                    del history_data[symbol]
        finally:
            time.sleep(delay_between_requests)

def check_and_send_alerts():
    """
    檢查是否有顯著的價格/持倉量變動，並發送 Telegram 警報。
    """
    global history_data
    now = datetime.now(pytz.utc)

    for symbol in list(monitored_symbols):
        if symbol not in history_data:
            continue

        spot_hist = history_data[symbol]['spot']
        fut_hist = history_data[symbol]['futures']

        p1 = calculate_percentage_change(spot_hist, 1)
        p5 = calculate_percentage_change(spot_hist, 5)
        p15 = calculate_percentage_change(spot_hist, 15)

        o1 = calculate_percentage_change(fut_hist, 1)
        o5 = calculate_percentage_change(fut_hist, 5)
        o15 = calculate_percentage_change(fut_hist, 15)

        price_rating = get_rating_info(max(abs(p1) if p1 is not None else 0, abs(p5) if p5 is not None else 0, abs(p15) if p15 is not None else 0), PRICE_TIERS)
        oi_rating = get_rating_info(max(abs(o1) if o1 is not None else 0, abs(o5) if o5 is not None else 0, abs(o15) if o15 is not None else 0), OI_TIERS)

        price_alert_threshold_met = (
            (p1 is not None and abs(p1) >= PRICE_TIERS[-1]["threshold"]) or
            (p5 is not None and abs(p5) >= PRICE_TIERS[-1]["threshold"]) or
            (p15 is not None and abs(p15) >= PRICE_TIERS[-1]["threshold"])
        )

        oi_alert_threshold_met = (
            (o1 is not None and abs(o1) >= OI_TIERS[-1]["threshold"]) or
            (o5 is not None and abs(o5) >= OI_TIERS[-1]["threshold"]) or
            (o15 is not None and abs(o15) >= OI_TIERS[-1]["threshold"])
        )

        last_alert_time = history_data[symbol]['last_alert_time']
        if last_alert_time and (now - last_alert_time).total_seconds() / 60 < ALERT_COOLDOWN_MINUTES:
            continue

        alert_message_parts = []
        is_alert_triggered = False

        if price_alert_threshold_met:
            price_alert_message = (
                f"📈 <b>價格異動 {price_rating}評級 - #{symbol}:</b>\n"
                f"• 1m: {format_pct_or_na(p1)} | 5m: {format_pct_or_na(p5)} | 15m: {format_pct_or_na(p15)}"
            )
            alert_message_parts.append(price_alert_message)
            is_alert_triggered = True

        if oi_alert_threshold_met:
            note = ""
            has_bearish_oi_increase = False
            if p1 is not None and o1 is not None and p1 < 0 and o1 > 0:
                has_bearish_oi_increase = True
            if p5 is not None and o5 is not None and p5 < 0 and o5 > 0:
                has_bearish_oi_increase = True
            if p15 is not None and o15 is not None and p15 < 0 and o15 > 0:
                has_bearish_oi_increase = True

            if has_bearish_oi_increase:
                note = " ⚠️疑是空方進場"

            oi_alert_message = (
                f"💹 <b>持倉異動 {oi_rating}{note} - #{symbol}:</b>\n"
                f"• 1m: {format_pct_or_na(o1)} | 5m: {format_pct_or_na(o5)} | 15m: {format_pct_or_na(o15)}"
            )
            alert_message_parts.append(oi_alert_message)
            is_alert_triggered = True
        
        if is_alert_triggered:
            if history_data[symbol]['first_alert_time'] is None:
                history_data[symbol]['first_alert_time'] = now
                history_data[symbol]['subsequent_alert_times'] = []
            else:
                history_data[symbol]['subsequent_alert_times'].append(now)

            # 簡化時間戳格式，避免中文
            first_alert_str = history_data[symbol]['first_alert_time'].strftime("%Y-%m-%d %H:%M:%S UTC")
            timestamp_info = f"\n首次觸發時間: {first_alert_str}"
            
            if history_data[symbol]['subsequent_alert_times']:
                last_subsequent_str = history_data[symbol]['subsequent_alert_times'][-1].strftime("%Y-%m-%d %H:%M:%S UTC")
                timestamp_info += f"\n上次觸發時間: {last_subsequent_str}"

            final_alert_message = "\n\n".join(alert_message_parts) + timestamp_info
            
            asyncio.run(send_telegram_alert(final_alert_message))
            history_data[symbol]['last_alert_time'] = now

# --- 主應用程式循環 ---

async def main_loop():
    """
    主要循環，負責獲取數據和檢查警報。
    """
    global is_ip_banned, ban_until

    start_message = "Ashdata掃鏈程式已啟動！正在初始化交易對列表..."
    print(f"INFO: 嘗試發送啟動訊息: {start_message}")
    try:
        await send_telegram_alert(start_message)
    except Exception as e:
        print(f"ERROR: 啟動訊息發送失敗: {e}")

    init_success = False
    while not init_success:
        init_success = initialize_monitoring_symbols()
        if not init_success:
            print("WARNING: 初始化交易對失敗。將在 60 秒後重試...")
            try:
                await send_telegram_alert("⚠️ 錯誤：Ashdata掃鏈初始化失敗，正在重試。")
            except:
                pass
            await asyncio.sleep(60)

    startup_complete_message = f"Ashdata掃鏈已偵測到 <b>{len(monitored_symbols)}</b> 種標的。監控服務正式啟動！"
    print(f"INFO: 嘗試發送啟動完成訊息: {startup_complete_message}")
    try:
        await send_telegram_alert(startup_complete_message)
    except Exception as e:
        print(f"ERROR: 啟動完成訊息發送失敗: {e}")

    while True:
        if is_ip_banned:
            if ban_until and datetime.now(pytz.utc) < ban_until:
                remaining_time = (ban_until - datetime.now(pytz.utc)).total_seconds()
                print(f"WARNING: IP 仍然被封鎖。將等待 {remaining_time:.0f} 秒後重試所有數據獲取。")
                try:
                    await send_telegram_alert(f"⚠️ 警報：Ashdata掃鏈IP已被幣安暫時封鎖，剩餘約 {remaining_time:.0f} 秒。")
                except:
                    pass
                await asyncio.sleep(max(10, remaining_time + 5))
                continue
            else:
                print("INFO: IP 封鎖可能已解除。正在嘗試清除封鎖狀態並重新初始化。")
                is_ip_banned = False
                ban_until = None
                init_success = initialize_monitoring_symbols()
                if not init_success:
                    print("WARNING: 解除封鎖後的重新初始化失敗。將在 60 秒後重試...")
                    try:
                        await send_telegram_alert("⚠️ 錯誤：Ashdata掃鏈解除IP封鎖後初始化失敗，正在重試。")
                    except:
                        pass
                    await asyncio.sleep(60)
                    continue

        print("INFO: 開始獲取現貨價格和期貨持倉量...")
        fetch_spot_prices()
        fetch_open_interest_rest()
        print("INFO: 完成數據獲取。")

        print("INFO: 檢查並發送警報...")
        check_and_send_alerts()
        print("INFO: 警報檢查完成。")

        min_fetch_interval = 60
        calculated_fetch_interval = len(monitored_symbols) * 0.5 + 10
        next_interval = max(min_fetch_interval, calculated_fetch_interval)
        
        print(f"INFO: 下一次數據獲取和警報檢查將在 {next_interval:.0f} 秒後進行...")
        await asyncio.sleep(next_interval)

if __name__ == "__main__":
    asyncio.run(main_loop())
